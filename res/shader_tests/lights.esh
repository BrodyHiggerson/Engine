#ifndef LIGHT_ESH
#define LIGHT_ESH

#include "stdlib.esh"

#define MAX_LIGHTS_PER_TILE 256

struct LightParams
{
	uint2 tileSize_;
	uint2 numTiles_;
	uint numLights_;
};

struct TileInfo
{
	float3 planes_[4];
	float2 depthMinMax_;
};

struct Light
{
	uint enabled_;
	float3 position_;
	float3 color_;
	float3 attenuation_;
	float intensity_;
};

uint EncodeLight(in uint2 l)
{
	return (l.x & 0xffffff) | (l.y << 24);
}

uint2 DecodeLight(in uint idx)
{
	return uint2(idx & 0xffffff, idx >> 24);
}


uint GetTileIdx(LightParams l, uint2 tileCoord)
{
	return tileCoord.x + tileCoord.y * l.numTiles_.x;
}

float CalculateAttn(float dist, float3 attnParams)
{
	float inv = ((attnParams.x + (dist * attnParams.y) + (dist * dist * attnParams.z)));
	return 1.0 / inv;
}

float CalulateDist(float attn, Light light)
{
	const float MAX_DIST = 1000000.0;

	float a = light.attenuation_.z;
	float b = light.attenuation_.y;
	float c = light.attenuation_.x - ( 1.0 / attn );

	// 0 = Ax2 + Bx + C
	if(a > 0.0)
	{
		float disc  = ((b * b) - (4.0 * a * c));
		{
		if(disc < 0.0)
			return MAX_DIST;
		}
		return abs((-b + sqrt(disc)) / (2.0 * a));
	}
	// 0 = Bx + C
	else if(b > 0.0)
	{
		return abs(-c / b);
	}
	return MAX_DIST;
}



#endif // LIGHT_ESH
