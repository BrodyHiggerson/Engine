#define REQUIRE_TEXCOORD0
//#define REQUIRE_TANGENT

#include "base_geometry.esh"
#include "material_common.esh"

///////////////////////////////////////////////////////////////////////
// Shaders
uint ShadeVertex(uniform int passID, in Object obj, inout VertexData vtxData)
{
	return VTX_DEFAULT;
}

uint ShadePixel(uniform int passID, inout PixelData pixData)
{
	const float2 texcoord = pixData.input.texcoord0;
	const float opacity = texOpacity.Sample(SS_MIP_WRAP, texcoord);
	clip(opacity < 0.5 ? -1 : 1);

	switch(passID)
	{
		case PASS_DEPTH_PREPASS:
		{

			return PIX_DEFAULT;
		}

		case PASS_SHADOW:
		{
			return PIX_DEFAULT;
		}

		case PASS_FORWARD:
		{
			float4 specular = texSpecular.Sample(SS_MIP_WRAP, texcoord);

			pixData.normal = DecodeNormal(texNormal.Sample(SS_MIP_WRAP, texcoord)).rgb;
			pixData.color.rgb = GammaToLinear(texDiffuse.Sample(SS_MIP_WRAP, texcoord).rgb);
			pixData.color.a = 1.0;
			pixData.roughness = 1.0 - specular.a;
			pixData.metallic = dot(specular.rgb, float3(1/3, 1/3, 1/3));
			pixData.specular = DIELECTRIC_F0;
			return PIX_LIGHTING;
		}
	}

	return PIX_DEFAULT;
}
