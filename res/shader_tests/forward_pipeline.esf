#include "stdlib.esh"
#include "lights.esh"

///////////////////////////////////////////////////////////////////////
// Compute light tiles.
cbuffer ViewCBuffer
{
	ViewParams v_;
};

cbuffer LightCBuffer
{
	LightParams l_;
};

struct CS_INPUT
{
	int3 groupID : SV_GroupID;
	int3 groupThreadID : SV_GroupThreadID;
	int3 dispatchID : SV_DispatchThreadID;
};

///////////////////////////////////////////////////////////////////////
// Compute light tiles.
StructuredBuffer<Light> inLights;

globallycoherent RWBuffer<uint> lightIndex;
RWTexture2D<uint> outLightTex;
RWStructuredBuffer<uint> outLightIndices;

RWStructuredBuffer<TileInfo> outTileInfo;
StructuredBuffer<TileInfo> inTileInfo;

[numthreads(1,1,1)]
void cs_compute_tile_info(CS_INPUT _in)
{

	//
	const float3 eyePos = float3(0.0, 0.0, 0.0);

	// Calculate corners offsets.
	const uint2 id = _in.groupID;
	const uint4 corners = uint4(id.x, id.y, id.x + 1, id.y + 1) * l_.tileSize_.xyxy;

	// Screen space tile corners:
	// TL, TR, BR, BL
	float4 ssCorners[4];
	ssCorners[0] = float4(corners.xy, 1.0, 1.0);
	ssCorners[1] = float4(corners.zy, 1.0, 1.0);
	ssCorners[2] = float4(corners.zw, 1.0, 1.0);
	ssCorners[3] = float4(corners.xw, 1.0, 1.0);

	// Convert to view space.
	float3 vsCorners[4];
	for(int i = 0; i < 4; ++i)
		vsCorners[i] = ScreenToView(v_, ssCorners[i]).xyz;

	// Calculate planes in view space.
	TileInfo tileInfo = (TileInfo)0;
	tileInfo.planes_[0].xyz = CalculatePlaneNormal(eyePos, vsCorners[0], vsCorners[3]);
	tileInfo.planes_[1].xyz = CalculatePlaneNormal(eyePos, vsCorners[1], vsCorners[0]);
	tileInfo.planes_[2].xyz = CalculatePlaneNormal(eyePos, vsCorners[2], vsCorners[1]);
	tileInfo.planes_[3].xyz = CalculatePlaneNormal(eyePos, vsCorners[3], vsCorners[2]);

	// Only one thread should write.
	if(_in.groupThreadID.x == 0 && _in.groupThreadID.y == 0)
	{
		const uint tileIdx = GetTileIdx(l_, id);
		outTileInfo[tileIdx] = tileInfo;
	}
}

Technique TECH_COMPUTE_TILE_INFO =
{
	.ComputeShader = cs_compute_tile_info,
};

Texture2D<float> depthTex;

groupshared uint gDepthMin = 0xffffffff;
groupshared uint gDepthMax = 0;
groupshared uint gNumLights = 0;
groupshared int gLightIndices[MAX_LIGHTS_PER_TILE];

#define LIGHT_LIST_GROUP_SIZE 16
#define MAX_LIGHTS_PER_THREAD (MAX_LIGHTS_PER_TILE / LIGHT_LIST_GROUP_SIZE)

[numthreads(LIGHT_LIST_GROUP_SIZE,LIGHT_LIST_GROUP_SIZE,1)]
void cs_compute_light_lists(CS_INPUT _in)
{
	float depth = depthTex.Load(uint3(_in.dispatchID.xy, 0));
	uint depthInt = asuint(depth);
	uint outTemp;

	GroupMemoryBarrierWithGroupSync();
	InterlockedMin(gDepthMin, depthInt, outTemp);
	InterlockedMax(gDepthMax, depthInt, outTemp);
	GroupMemoryBarrierWithGroupSync();

	float depthMin = ClipToView(v_, float4(0.0, 0.0, asfloat(gDepthMin), 1.0)).z;
	float depthMax = ClipToView(v_, float4(0.0, 0.0, asfloat(gDepthMax), 1.0)).z;

	// Grab tile info.
	const uint tileIdx = GetTileIdx(l_, _in.groupID.xy);
	const TileInfo tileInfo = inTileInfo[tileIdx];

	// Build up local light list with multiple threads within the same group,
	uint localLightLinkIdx = 0;
	uint advanceRate = LIGHT_LIST_GROUP_SIZE * LIGHT_LIST_GROUP_SIZE;
	uint startLightIdx = _in.groupThreadID.x + _in.groupThreadID.y * LIGHT_LIST_GROUP_SIZE;

	for(uint idx = startLightIdx; idx < l_.numLights_ && localLightLinkIdx < MAX_LIGHTS_PER_TILE; idx += advanceRate)
	{
		Light light = inLights[idx];
		float4 vsLightPos = mul(v_.view_, float4(light.position_.xyz, 1.0));
		float radius = light.radiusOuter_;

		// Reject any fully outside of any planes.
		bool inTile = true;
		if((vsLightPos.z + radius) < depthMin || (vsLightPos.z - radius) > depthMax)
		{
			inTile = false;
		}
		else
		{
			for(int i = 0; i < 4 && inTile; ++i)
			{
				float dist = PlaneDistanceNormal(tileInfo.planes_[i].xyz, vsLightPos.xyz);
				if(dist < -radius)
					inTile = false;
			}
		}

		if(inTile)
		{
			InterlockedAdd(gNumLights, 1, localLightLinkIdx);
			gLightIndices[localLightLinkIdx] = idx;
		}
	}

	// Wait for other threads in groups.
	GroupMemoryBarrierWithGroupSync();

	// Only one thread within the group should do the final write.
	if(_in.groupThreadID.x == 0 && _in.groupThreadID.y == 0)
	{
		// Put lights found into global list.
		uint globalLightLinkIdx = 0;
		InterlockedAdd(lightIndex[0], gNumLights, globalLightLinkIdx);

		uint maxLights;
		uint stride;
		outLightIndices.GetDimensions(maxLights, stride);

		// Write index and number of lights to texture.
		outLightTex[_in.groupID.xy] = EncodeLight(uint2(globalLightLinkIdx, gNumLights));

		// Write light indices to UAV.
		for(uint idx = 0; idx < gNumLights; ++idx)
		{
			uint outIdx = globalLightLinkIdx + idx;
			if(outIdx < maxLights)
				outLightIndices[outIdx] = gLightIndices[idx];
			else
				break;
		}
	}
}

Technique TECH_COMPUTE_LIGHT_LISTS =
{
	.ComputeShader = cs_compute_light_lists,
};

Texture2D<uint> inLightTex;
StructuredBuffer<uint> inLightIndices;
RWTexture2D<float4> outDebug;

[numthreads(1,1,1)]
void cs_debug_tile_info(CS_INPUT _in)
{
	const uint2 id = _in.dispatchID.xy;
	const uint tileIdx = GetTileIdx(l_, id);
	const TileInfo tileInfo = inTileInfo[tileIdx];

#if 0
	float depthMin = (tileInfo.depthMinMax_.x - 0.9) * 10.0;
	float depthMax = (tileInfo.depthMinMax_.y - 0.9) * 10.0;
	outDebug[id] = float4(depthMin, depthMax, 0.0, 1.0);
#else
	int2 lightTexel = DecodeLight(inLightTex[_in.groupID.xy]);
	float lightCount = (1.0  / MAX_LIGHTS_PER_TILE) * lightTexel.y;
	outDebug[id] = HSVtoRGB(float3(lightCount, 1.0, 1.0));
#endif
}

Technique TECH_DEBUG_TILE_INFO =
{
	.ComputeShader = cs_debug_tile_info,
};

///////////////////////////////////////////////////////////////////////
// Fullscreen shader.
struct VS_FULLSCREEN_OUTPUT
{
	float4 position_ : SV_POSITION;
	float2 texcoord_ : TEXCOORD0;
};

VS_FULLSCREEN_OUTPUT vs_fullscreen(uint id : SV_VertexID)
{
	VS_FULLSCREEN_OUTPUT output = (VS_FULLSCREEN_OUTPUT)0;
	output.position_.x = (float)(id / 2) * 4.0 - 1.0;
	output.position_.y = (float)(id % 2) * 4.0 - 1.0;
	output.position_.z = 0.0;
	output.position_.w = 1.0;
	output.texcoord_.x = (float)(id / 2) * 2.0;
	output.texcoord_.y = 1.0 - (float)(id % 2) * 2.0;
	return output;
}

Texture2D<float4> debugTex;
SamplerState SS_FULLSCREEN = 
{
	.AddressU = CLAMP,
	.AddressV = CLAMP,
	.AddressW = CLAMP,
	.MinFilter = NEAREST,
	.MagFilter = NEAREST,
};

float4 ps_fullscreen(VS_FULLSCREEN_OUTPUT _in) : SV_TARGET0
{
	return debugTex.Sample(SS_FULLSCREEN, _in.texcoord_);
}

RenderState RS_FULLSCREEN =
{
	.BlendStates = {
		.Enable = 1,
		.SrcBlend = ONE,
		.DestBlend = ZERO,
	},

	.DepthEnable = 0,
	.FillMode = SOLID,
	.CullMode = NONE,
};

Technique TECH_FULLSCREEN =
{
	.RenderState = RS_FULLSCREEN,
	.VertexShader = vs_fullscreen,
	.PixelShader = ps_fullscreen,
};
