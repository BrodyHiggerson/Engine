#ifndef STDLIB_NORMALS_ESH
#define STDLIB_NORMALS_ESH

float3x3 BuildTBN(float3 normal, float3 tangent)
{
	const float3 binormal = normalize(cross(tangent, normal));
	return float3x3(tangent, binormal, normal);
}

float3x3 BuildTBN(float3 normal, float3 pos, float2 uv)
{
	float3 posdx = ddx(pos);
	float3 posdy = ddy(pos);
	float2 uvdx = ddx(uv);
	float2 uvdy = ddy(uv);

	float3 tangent = normalize(uvdy.y * posdx - uvdx.y * posdy);
	float3 binormal = normalize(uvdy.x * posdx - uvdx.x * posdy);

	tangent = cross(cross(normal, tangent), normal);
	tangent = normalize(tangent);

	binormal = cross(normal, cross(binormal, normal));
	binormal = normalize(binormal);

	return float3x3(tangent, binormal, normal);
}

float3 EncodeNormal(float3 nrm)
{
	const float3 scale = float3(0.5, 0.5, 0.5);
	return nrm * scale + scale;
}

float3 DecodeNormal(float3 nrm)
{
	const float3 scale = float3(2.0, 2.0, 2.0);
	return nrm * scale - float3(1.0, 1.0, 1.0);
}

float3 ReconstructNormal(float3 nrm)
{
	return float3(nrm.xy, sqrt(1.0 - dot(nrm.xy, nrm.xy)));
}

#endif
