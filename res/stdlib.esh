#pragma once

float3x3 buildTBN(float3 inTangent, float3 inBinormal, float3 inNormal)
{
	return float3x3(normalize(inTangent), normalize(inBinormal), normalize(inNormal));
}

#define FAST_GAMMA_CONVERSION ( 0 )
#define ACCURATE_GAMMA_CONVERSION ( 1 )

float3 gammaToLinear(float3 inRGBA)
{
#if FAST_GAMMA_CONVERSION
	return inRGBA.rgb * inRGBA.rgb;
#elif ACCURATE_GAMMA_CONVERSION
	// http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf pg87
	float3 linearRGBLo = inRGBA / 12.92;
	float3 linearRGBHi = pow((inRGBA + 0.055) / 1.055, float3(2.4, 2.4, 2.4));
	return float3( 
		(inRGBA.x <= 0.04045) ? linearRGBLo.x : linearRGBHi.x,
		(inRGBA.y <= 0.04045) ? linearRGBLo.y : linearRGBHi.y,
		(inRGBA.z <= 0.04045) ? linearRGBLo.z : linearRGBHi.z);
#else
	float gamma = 2.2;
	return pow(max(float3(0.0, 0.0, 0.0), inRGBA.rgb), float3(gamma, gamma, gamma));
#endif
}

float4 gammaToLinear(float4 inRGBA)
{
	return float4(gammaToLinear(inRGBA.rgb), inRGBA.a);
}

float3 linearToGamma(float3 inRGBA)
{
#if FAST_GAMMA_CONVERSION
	return sqrt(inRGBA.rgb);
#elif ACCURATE_GAMMA_CONVERSION
	// http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf pg87
	float3 sRGBLo = inRGBA * 12.92;
	float3 sRGBHi = (pow(abs(inRGBA) , float3(1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4)) * 1.055) - 0.055;
	return float3(
		(inRGBA.x <= 0.0031308) ? sRGBLo.x : sRGBHi.x,
		(inRGBA.y <= 0.0031308) ? sRGBLo.y : sRGBHi.y,
		(inRGBA.z <= 0.0031308) ? sRGBLo.z : sRGBHi.z);
#else	
	float   = 1.0 / 2.2;
	return pow(max(float3(0.0, 0.0, 0.0), inRGBA.rgb), float3(invGamma, invGamma, invGamma));
#endif
}

float4 linearToGamma(float4 inRGBA)
{
	return float4(linearToGamma(inRGBA.rgb), inRGBA.a);
}

float3 encodeNormal(float3 nrm)
{
	const float3 scale = float3(0.5, 0.5, 0.5);
	return nrm * scale + scale;
}

float3 decodeNormal(float3 nrm)
{
	const float3 scale = float3(2.0, 2.0, 2.0);
	return nrm * scale - float3(1.0, 1.0, 1.0);
}

float3 reconstructNormal(float3 nrm)
{
	return float3(nrm.xy, sqrt(1.0 - dot(nrm.xy, nrm.xy)));
}

float linearDepth(float depth, float near, float far)
{
	depth = 2.0 * depth - 1.0;
	return (2.0 * (near * far)) / ((near + far) - depth * (far - near));
}

float luminance(float3 inRGB)
{
	return dot(inRGB, float3(0.2126, 0.7152, 0.0722));
}

